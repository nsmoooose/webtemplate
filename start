#!/usr/bin/python
import cherrypy
import optparse
import os
import os.path
import webapp.api.model as model
import webapp.web.db as db
import webapp.web.root
import webapp.web.template
import sys

from cherrypy.process.plugins import Daemonizer, PIDFile

if __name__ == '__main__':
    usage = "%prog [--help] [options]"
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("--port", dest="port", type='int', help="port to use (default %default)", default=9091)
    parser.add_option("--thread-pool", dest="thread_pool", type='int', help="Thread pool size (default %default)", default=6)
    parser.add_option('--daemon', dest="daemonize", action='store_true', help="starts the process as a daemon")
    parser.add_option('--pid-file', dest="pid_file", type='str', help="pid file when running as a daemon (default %default)", default="/var/run/webapp.pid")
    options, args = parser.parse_args()

    config = {
        "global" : {
            "server.socket_port" : options.port,
            "server.thread_pool" : options.thread_pool,
            "tools.auth.on" : True,
            "tools.sessions.on" : True,
            "tools.staticdir.root" : os.path.realpath(os.path.join(os.path.dirname(__file__), "webapp" , "web"))
            },
        "/static" : {
            "tools.staticdir.on" : True,
            "tools.staticdir.dir" : "static"
            }
        }

    webapp.web.template.context_extensions["application_settings"] = \
        lambda: db.get().query(model.ApplicationSettings).one()

    if options.daemonize:
        print("Starting as a daemon")
        Daemonizer(cherrypy.engine).subscribe()
        print("Using pid-file: %s" % options.pid_file)
        PIDFile(cherrypy.engine, options.pid_file).subscribe()

    webapp.web.db.open_database("sqlite:///webapp.db")

    cherrypy.quickstart(webapp.web.root.Root(), "/", config=config)
